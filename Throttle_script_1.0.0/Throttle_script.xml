<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Analytics>
    <Name>Throttle_script</Name>
<Script>

create temporary table APIThrottleSummaryData using CarbonJDBC options (dataSource "WSO2AM_STATS_DB", tableName "API_THROTTLED_OUT_SUMMARY");

create temporary table APIThrottleData USING CarbonAnalytics OPTIONS(tableName "ORG_WSO2_APIMGT_STATISTICS_THROTTLE");

create temporary table APIRequestData USING CarbonAnalytics OPTIONS(tableName "ORG_WSO2_APIMGT_STATISTICS_REQUEST");  

CREATE TEMPORARY TABLE THROTTLED_OUT_FINAL_SUMMARY USING CarbonAnalytics OPTIONS (tableName "API_THROTTLED_OUT_SUMMARY",
  schema "api string,
  api_version string,
  context string,
  apiPublisher string,
  applicationName string,
  tenantDomain string,
  year int,
  month int,
  day int,
  week int,
  time string,
  success_request_count int,
  throttleout_count int",
  primaryKeys "api,api_version,context,apiPublisher,applicationName,tenantDomain,year,month,date,time"
);

insert into table THROTTLED_OUT_FINAL_SUMMARY select a.* ,b.throttleout_count from 

(select api,api_version,context,apiPublisher,applicationName,tenantDomain, 
substring(cast(first(requestTime)/1000 as timestamp),0,4) year,
substring(cast(first(requestTime)/1000 as timestamp),6,2) month,
substring(cast(first(requestTime)/1000 as timestamp),9,2) day,
cast(first(requestTime)/(1000 * 60 * 60 *24 * 7) as INT) week, 
substring(cast(first(requestTime)/1000 as timestamp),0,16) time, 
sum(request) as success_request_count 

from APIRequestData where context is not NULL group by 
api,api_version,context,apiPublisher,applicationName,tenantDomain,
substring(cast(requestTime/1000 as timestamp),0,4) ,
substring(cast(requestTime/1000 as timestamp),6,2),
substring(cast(requestTime/1000 as timestamp),9,2),
cast(requestTime/(1000 * 60 * 60 *24 * 7) as INT)
) a full outer join 

(select api,api_version,context,apiPublisher,applicationName,tenantDomain, 
substring(cast(first(throttledTime)/1000 as timestamp),0,4) year,
substring(cast(first(throttledTime)/1000 as timestamp),6,2) month,
substring(cast(first(throttledTime)/1000 as timestamp),9,2) day,
cast(first(throttledTime)/(1000 * 60 * 60 *24 * 7) as INT) week, 
substring(cast(first(throttledTime)/1000 as timestamp),0,16) time, 
count(apiPublisher) as throttleout_count 
from APIThrottleData where context is not NULL group by 
api,api_version,context,apiPublisher,applicationName,tenantDomain,
substring(cast(throttledTime/1000 as timestamp),0,4),
substring(cast(throttledTime/1000 as timestamp),6,2),
substring(cast(throttledTime/1000 as timestamp),9,2),
cast((throttledTime/(1000 * 60 * 60 *24 * 7)) as INT)
) b ON a.api=b.api AND a.api_version=b.api_version AND a.context=b.context AND a.apiPublisher=b.apiPublisher AND a.applicationName=b.applicationName AND a.tenantDomain=b.tenantDomain AND
 a.year=b.year AND a.month=b.month AND a.day=b.day AND a.week=b.week;

INSERT OVERWRITE TABLE APIThrottleSummaryData SELECT * FROM THROTTLED_OUT_FINAL_SUMMARY;               
                                                                                                                                                        
</Script>
    <CronExpression>0 0/20 * 1/1 * ? *</CronExpression>
</Analytics>
