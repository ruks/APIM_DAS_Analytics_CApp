<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Analytics>
    <Name>APIM_STAT_script</Name>
<Script>

CREATE TEMPORARY TABLE APIRequestSummaryData USING CarbonAnalytics OPTIONS (tableName "API_REQUEST_SUMMARY", schema "api string -i,api_version string  -i, version string  -i, apiPublisher string -i,consumerKey string -i,userId string -i,context string -i,max_request_time LONG -i,total_request_count INT -i,hostName string -i,year INT -i,month INT -i,day INT -i,time string -i",primaryKeys "api,api_version,version,apiPublisher,consumerKey,userId,context,hostName,time");
        
create temporary table APIRequestData USING CarbonAnalytics OPTIONS(tableName "ORG_WSO2_APIMGT_STATISTICS_REQUEST");  
                           
insert overwrite table APIRequestSummaryData select api, api_version,version, apiPublisher, 
COALESCE(consumerKey,''),
userId,context,
max(requestTime) as max_request_time,
sum(request) as total_request_count,
hostName,  
substring(cast(requestTime/1000 as timestamp),0,4),
substring(cast(requestTime/1000 as timestamp),6,2),
substring(cast(requestTime/1000 as timestamp),9,2),
substring(cast(requestTime/1000 as timestamp),0,16) 

from APIRequestData where context is not NULL group by api,api_version,version,apiPublisher,consumerKey,userId,context,hostName,

substring(cast(requestTime/1000 as timestamp),0,4), 
substring(cast(requestTime/1000 as timestamp),6,2),
substring(cast(requestTime/1000 as timestamp),9,2),
substring(cast(requestTime/1000 as timestamp),12,2),
substring(cast(requestTime/1000 as timestamp),15,2),
substring(cast(requestTime/1000 as timestamp),0,16);                            
                            
                            

CREATE TEMPORARY TABLE APIVersionUsageSummaryData USING CarbonAnalytics OPTIONS (tableName "API_VERSION_USAGE_SUMMARY", schema "api string -i, version string  -i, apiPublisher string -i,context string -i,total_request_count INT -i,hostName string -i,year INT -i,month INT -i,day INT -i,time string -i",primaryKeys "api,version,apiPublisher,context,hostName,time");
  
insert overwrite table APIVersionUsageSummaryData select
api,version,apiPublisher,context,sum(request) as total_request_count,hostName,

substring(cast(requestTime/1000 as timestamp),0,4),
substring(cast(requestTime/1000 as timestamp),6,2),
substring(cast(requestTime/1000 as timestamp),9,2),
substring(cast(requestTime/1000 as timestamp),0,16)

from APIRequestData where 

context is not NULL group by api,version,apiPublisher,context,hostName,

substring(cast(requestTime/1000 as timestamp),0,4), 
substring(cast(requestTime/1000 as timestamp),6,2),
substring(cast(requestTime/1000 as timestamp),9,2),
substring(cast(requestTime/1000 as timestamp),12,2),
substring(cast(requestTime/1000 as timestamp),15,2),
substring(cast(requestTime/1000 as timestamp),0,16);            





CREATE TEMPORARY TABLE APIResourcePathUsageSummaryData USING CarbonAnalytics OPTIONS (tableName "API_Resource_USAGE_SUMMARY", schema "api string -i, version string  -i, apiPublisher string -i,consumerKey string -i,resourcePath string -i,context string -i,method string -i,total_request_count INT -i,hostName string -i,year INT -i,month INT -i,day INT -i,time string -i",primaryKeys "api,version,apiPublisher,consumerKey,context,resourcePath,method,hostName,time");

insert overwrite table APIResourcePathUsageSummaryData select 
api,version,apiPublisher,COALESCE(consumerKey,''),
resourcePath,context,method,sum(request) as total_request_count,hostName, 

substring(cast(requestTime/1000 as timestamp),0,4),
substring(cast(requestTime/1000 as timestamp),6,2),
substring(cast(requestTime/1000 as timestamp),9,2),
substring(cast(requestTime/1000 as timestamp),0,16)

from APIRequestData where 
context is not NULL group by api,version,apiPublisher,consumerKey,resourcePath,context,method,hostName,

substring(cast(requestTime/1000 as timestamp),0,4), 
substring(cast(requestTime/1000 as timestamp),6,2),
substring(cast(requestTime/1000 as timestamp),9,2),
substring(cast(requestTime/1000 as timestamp),12,2),
substring(cast(requestTime/1000 as timestamp),15,2),
substring(cast(requestTime/1000 as timestamp),0,16);                
                            
                            
                            
                            
CREATE TEMPORARY TABLE APIResponseSummaryData USING CarbonAnalytics OPTIONS (tableName "API_RESPONSE_SUMMARY", schema "api_version string -i,apiPublisher string -i,context string -i,serviceTime LONG -i,total_request_count INT -i,hostName string -i,year INT -i,month INT -i,day INT -i,time string -i",primaryKeys "api_version,apiPublisher,context,hostName,time");                            

create temporary table APIResponseData USING CarbonAnalytics OPTIONS(tableName "ORG_WSO2_APIMGT_STATISTICS_RESPONSE");

insert overwrite table APIResponseSummaryData select 
api_version,
COALESCE(apiPublisher,''),
context, 
avg(serviceTime) as avg_service_time,
sum(response) as total_response_count,
hostName, 
substring(cast(eventTime/1000 as timestamp),0,4),
substring(cast(eventTime/1000 as timestamp),6,2),
substring(cast(eventTime/1000 as timestamp),9,2),
substring(cast(eventTime/1000 as timestamp),0,16)
from APIResponseData 
where 
context is not NULL group by api_version,apiPublisher,context,hostName,
substring(cast(eventTime/1000 as timestamp),0,4), 
substring(cast(eventTime/1000 as timestamp),6,2),
substring(cast(eventTime/1000 as timestamp),9,2),
substring(cast(eventTime/1000 as timestamp),12,2),
substring(cast(eventTime/1000 as timestamp),15,2),
substring(cast(eventTime/1000 as timestamp),0,16);





CREATE TEMPORARY TABLE APIFaultSummaryData USING CarbonAnalytics OPTIONS (tableName "API_FAULT_SUMMARY", schema "api string -i, version string  -i, apiPublisher string -i,consumerKey string -i,context string -i,total_fault_count INT -i,hostName string -i,year INT -i,month INT -i,day INT -i,time string -i",primaryKeys "api,version,apiPublisher,context,hostName,time");

create temporary table APIFaultData USING CarbonAnalytics OPTIONS(tableName "ORG_WSO2_APIMGT_STATISTICS_FAULT");                     
                            
insert overwrite table APIFaultSummaryData select 
api,version,apiPublisher,COALESCE(consumerKey,''),context,
count(errorMessage) as total_fault_count,
hostName, 
substring(cast(requestTime/1000 as timestamp),0,4),
substring(cast(requestTime/1000 as timestamp),6,2),
substring(cast(requestTime/1000 as timestamp),9,2),
substring(cast(requestTime/1000 as timestamp),0,16) 
from APIFaultData where 
context is not NULL group by api,version,apiPublisher,consumerKey ,context,hostName,

substring(cast(requestTime/1000 as timestamp),0,4), 
substring(cast(requestTime/1000 as timestamp),6,2),
substring(cast(requestTime/1000 as timestamp),9,2),
substring(cast(requestTime/1000 as timestamp),12,2),
substring(cast(requestTime/1000 as timestamp),15,2),
substring(cast(requestTime/1000 as timestamp),0,16);





CREATE TEMPORARY TABLE APIDestinationDataSummaryData USING CarbonAnalytics OPTIONS (tableName "API_DESTINATION_SUMMARY", schema "api string -i, version string  -i, apiPublisher string -i,context string -i,destination string -i,total_request_count INT -i,hostName string -i,year INT -i,month INT -i,day INT -i,time string -i",primaryKeys "api,version,apiPublisher,context,destination,hostName,time");

create temporary table APIDestinationData USING CarbonAnalytics OPTIONS(tableName "ORG_WSO2_APIMGT_STATISTICS_DESTINATION");                       
                            
insert overwrite table APIDestinationDataSummaryData select 
api,version,apiPublisher, context,destination, sum(request) as total_request_count,hostName, 

substring(cast(requestTime/1000 as timestamp),0,4),
substring(cast(requestTime/1000 as timestamp),6,2),
substring(cast(requestTime/1000 as timestamp),9,2),
substring(cast(requestTime/1000 as timestamp),0,16) 

from APIDestinationData 
where context is not NULL group by api,version,apiPublisher,context,destination,hostName,

substring(cast(requestTime/1000 as timestamp),0,4), 
substring(cast(requestTime/1000 as timestamp),6,2),
substring(cast(requestTime/1000 as timestamp),9,2),
substring(cast(requestTime/1000 as timestamp),12,2),
substring(cast(requestTime/1000 as timestamp),15,2),
substring(cast(requestTime/1000 as timestamp),0,16);                       
                                                        
                            
                                             
</Script>
    <CronExpression>0 * * * * ?</CronExpression>
</Analytics>
